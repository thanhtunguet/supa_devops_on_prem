plugins {
    id "com.android.application"
    id "kotlin-android"
    id "com.google.gms.google-services"
    id 'com.google.firebase.firebase-perf'
    id 'com.google.firebase.crashlytics'
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def dartEnvironmentVariables = ['': '']
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

android {
    namespace 'vn.com.goldsunfocusmedia.focus'

    compileSdkVersion 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "vn.com.goldsunfocusmedia.focus"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    def KEY_FILE = System.getenv("KEY_FILE")
    def KEY_ALIAS = System.getenv("KEY_ALIAS")
    def KEY_PASS = System.getenv("KEY_PASS")

    if (!KEY_FILE || !KEY_ALIAS || !KEY_PASS) {
        throw new GradleException("Environment variables for signing config are not set correctly.")
    }

    signingConfigs {
        debug {
            storeFile file(KEY_FILE)
            keyAlias KEY_ALIAS
            storePassword KEY_PASS
            keyPassword KEY_PASS
        }
        release {
            storeFile file(KEY_FILE)
            keyAlias KEY_ALIAS
            storePassword KEY_PASS
            keyPassword KEY_PASS
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            shrinkResources false
            minifyEnabled false
        }
    }
}

flutter {
    source '../..'
}
